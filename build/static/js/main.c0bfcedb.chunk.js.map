{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","Reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","addNewChat","name","id","useState","seed","setSeed","messages","setMessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","user","rooms","setRooms","unsubscribe","photoURL","displayName","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","i","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0bfcedb.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCa60jmyCzgZ7MMGNKPEAWm0ox7lP5NUT8\",\r\n  authDomain: \"biju-whats-app-clone.firebaseapp.com\",\r\n  databaseURL: \"https://biju-whats-app-clone.firebaseio.com\",\r\n  projectId: \"biju-whats-app-clone\",\r\n  storageBucket: \"biju-whats-app-clone.appspot.com\",\r\n  messagingSenderId: \"748189529823\",\r\n  appId: \"1:748189529823:web:c364165f3f67aeda7e9b6a\",\r\n  measurementId: \"G-LCF7P8M6P5\",\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n/* it helps to connect the firebase database and get the data from the database  */\r\nconst db = firebaseApp.firestore();\r\n\r\n/* for the authentications */\r\nconst auth = firebase.auth();\r\n/* for google authnetications  */\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n/* export explicit and the export implicit */\r\nexport default db;\r\nexport { auth, provider };\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport \"./SidebarChat.css\";\r\nimport db from \"./firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SidebarChat({ addNewChat, name, id }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState(\"\");\r\n  /* for adding new chat */\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please Enter the room name for chat\");\r\n\r\n    if (roomName) {\r\n      // do some database stuff\r\n      /* here we are adding the new document in the collections rooms which has it's own id and the data is name with the value store by the prompt messages */\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    /* Every times the component loads the seed will set the random value between the five thousand and gives the random avatar*/\r\n    //console.log(Math.floor(Math.random() * 5000));\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  /* useEffect for the last messages in the sidbarchat sreen */\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n  /* if the addNewChat is in the props of the any of the sidebarOption then we will show the div which will show the Add new Chat and which is clickable and make us to click and create the new room  */\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        {/* to making the random  avatar faces the trick goes here\r\n      \r\n      just using the url \r\n      ==>https://avatars.dicebear.com/api/human/and random alphabet or the numbers.svg (SEED)gives us the random svg or the random face*/}\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          {/* as the messages is the array of the database messages and we have set the messages to be array of the data in the database to the descending order so  the last messages is in the first index */}\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarChat\">\r\n      <h2>Add new Chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n/* preparing the context for data layer (just we can say that we are preparing the place for the data layer to lives) with the createContext()*/\r\nexport const StateContext = createContext();\r\n\r\n/* sets the data in the data layer */\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\n/* pulls the data from the data layer */\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport db from \"./firebase\";\r\nimport \"./Sidebar.css\";\r\n\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nfunction Sidebar() {\r\n  /* rooms  */\r\n  const [{ user }] = useStateValue();\r\n  const [rooms, setRooms] = useState([]);\r\n\r\n  useEffect(() => {\r\n    /* every times any things changes in the rooms database then it will takes the snaphshots and gives the snaphshot  */\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          name: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <div className=\"sidebar__header--left\">\r\n          <Avatar src={user?.photoURL} />\r\n          <span>\r\n            <h3>{user?.displayName}</h3>\r\n          </span>\r\n        </div>\r\n        <div className=\"sidebar__header--right\">\r\n          {/* for making the clickable button IconButton in the code  */}\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__search--container\">\r\n          <SearchOutlinedIcon />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        {/* on sidebarChat is user for adding the new chat room.  */}\r\n        <SidebarChat addNewChat />\r\n        {rooms.map((room) => (\r\n          <SidebarChat id={room.id} key={room.id} name={room.name.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n  const [seed, setSeed] = useState(\"\");\r\n\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  /* for props.params we have the hooks from the react router dom */\r\n  const [{ user }] = useStateValue();\r\n  const { roomId } = useParams();\r\n\r\n  /* introducing the room name  */\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  /* useEffect for the roomName  */\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  /* useEffect for the seed  */\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, [roomId]);\r\n\r\n  /* send message */\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      name: user.displayName,\r\n      message: input,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n        <div className=\"chat__header--info\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__header--right\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((message, i) => (\r\n          <p\r\n            className={`chat__message ${\r\n              message.name === user.displayName && `chat__reciever`\r\n            }`}\r\n            key={i}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <button type=\"submit\" onClick={sendMessage}>\r\n            Send a Message\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","/* initial state is the  how the data layer looks before we passed anytypes of the data init*/\r\nexport const initialState = {\r\n  user: null,\r\n};\r\n/* this is same as the action  ((which means pushing the data in the data layer when the user is sign in these will tell dispatch and go to push these user in the data layer ))*/\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\n/* these is the collection of the action which will switch them according to the data has been passed in dispatch */\r\n/* these is the code for changing the data layer */\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./Reducer\";\r\nfunction Login() {\r\n  const [{}, dispatch] = useStateValue();\r\n  const signIn = () => {\r\n    /* when the user click the sign in  button then we are making to make the sign with google account (provider ) comes as the popup by signInWithPopup functions and the passing the google provider as the argument */\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          user: result.user,\r\n          type: actionTypes.SET_USER,\r\n        });\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"login__text\">\r\n          <h1>Sign In to WhatsApp</h1>\r\n        </div>\r\n        <Button type=\"submit\" onClick={signIn}>\r\n          Sign in with Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./Reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* State provide is the basically the data layer which surronds the app and  we push the data in the data layer */}\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}